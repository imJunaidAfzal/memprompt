
templates_gpt3_wordtasks = {
      "synthetic_gpt3": [
        {
            "type": "cyc",
            "template_id": "cyc0",
            "question": lambda word1: f"Find the right word given this cycled word: < {word1} > ?",
            "clarification": "clarification: when I want you to fix cycled word, I mean cycled.",
            "answer": lambda word1, word2: f"the uncycled version of {word1} is {word2}",
        },
        {
            "type": "cyc",
            "template_id": "cyc1",
            "question": lambda word1: f"Find the right word given this rotated word: < {word1} > ?",
            "clarification": "clarification: when I want you to fix a rotated word, I mean cycled.",
            "answer": lambda word1, word2: f"the uncycled version of {word1} is {word2}",
        },
        {
            "type": "cyc",
            "template_id": "cyc2",
            "question": lambda word1: f"Find the right word given this revolved word: < {word1} > ?",
            "clarification": "clarification: when I want you to fix a revolved word, I mean cycled.",
            "answer": lambda word1, word2: f"the uncycled version of {word1} is {word2}",
        },
        {
            "type": "anag1",
            "template_id": "anag10",
            "question": lambda word1: f"Unscramble everything except first and last char < {word1} > ?",
            "clarification": "clarification: when I want you to unscramble everything except first and last char, I mean anagram 1.",
            "answer": lambda word1, word2: f"the anagram 1 for {word1} is {word2}",
        },
        {
            "type": "anag1",
            "template_id": "anag11",
            "question": lambda word1: f"Make a word while keeping the first and last char < {word1} > ?",
            "clarification": "clarification: when I want you to make a word while keeping the first and last char, I mean anagram 1.",
            "answer": lambda word1, word2: f"the anagram 1 for {word1} is {word2}",
        },
        {
            "type": "anag1",
            "template_id": "anag12",
            "question": lambda word1: f"Figure out the word which has the same first and last char < {word1} > ?",
            "clarification": "clarification: when I want you to figure out the word which has the same first and last char, I mean anagram 1.",
            "answer": lambda word1, word2: f"the anagram 1 for {word1} is {word2}",
        },
        {
            "type": "anag2",
            "template_id": "anag20",
            "question": lambda word1: f"Unscramble everything except the first two and the last two char < {word1} > ?",
            "clarification": "clarification: when I want you to unscramble everything except the first two and the last two char, I mean anagram 2.",
            "answer": lambda word1, word2: f"the anagram 2 for {word1} is {word2}",
        },
        {
            "type": "anag2",
            "template_id": "anag21",
            "question": lambda word1: f"Make a word while keeping the first two and the last two char < {word1} > ?",
            "clarification": "clarification: when I want you to make a word while keeping the first two and the last two char, I mean anagram 2.",
            "answer": lambda word1, word2: f"the anagram 2 for {word1} is {word2}",
        },
        {
            "type": "anag2",
            "template_id": "anag22",
            "question": lambda word1: f"Figure out the word which has the same first two and the last two char < {word1} > ?",
            "clarification": "clarification: when I want you to figure out the word which has the same first two and the last two char, I mean anagram 2.",
            "answer": lambda word1, word2: f"the anagram 2 for {word1} is {word2}",
        },
        {
            "type": "randsym",
            "template_id": "randsym0",
            "question": lambda word1: f"Find the right word after removing random letters from < {word1} >",
            "clarification": "clarification: when I want you to remove random letters, I mean remove symbols.",
            "answer": lambda word1, word2: f"the word after removing symbols from {word1} is {word2}",
        },
        {
            "type": "randsym",
            "template_id": "randsym1",
            "question": lambda word1: f"Find the original word that is interspersed in < {word1} >",
            "clarification": "clarification: when I want you to find the original word that is interspersed, I mean remove symbols.",
            "answer": lambda word1, word2: f"the word after removing symbols from {word1} is {word2}",
        },
        {
            "type": "randsym",
            "template_id": "randsym2",
            "question": lambda word1: f"Find the original word after ignoring the punctuation and spaces in < {word1} >",
            "clarification": "clarification: when I want you to ignore the punctuation and spaces, I mean remove symbols.",
            "answer": lambda word1, word2: f"the word after removing symbols from {word1} is {word2}",
        },    
        {
            "type": "rev",
            "template_id": "rev0",
            "question": lambda word1: f"Find the original word after reversing < {word1} >",
            "clarification": "clarification: when I want you to reverse, I mean reverse.",
            "answer": lambda word1, word2: f"the word after reversing {word1} is {word2}",
        },
        {
            "type": "rev",
            "template_id": "rev1",
            "question": lambda word1: f"Find the original word after flipping < {word1} >",
            "clarification": "clarification: when I want you to flip, I mean reverse.",
            "answer": lambda word1, word2: f"the word after reversing {word1} is {word2}",
        },
        {
            "type": "rev",
            "template_id": "rev2",
            "question": lambda word1: f"Find the original word after spelling backwards < {word1} >",
            "clarification": "clarification: when I want you to spell backwards, I mean reverse.",
            "answer": lambda word1, word2: f"the word after reversing {word1} is {word2}",
        },

    ],
}
